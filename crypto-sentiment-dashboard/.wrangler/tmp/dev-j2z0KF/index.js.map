{
  "version": 3,
  "sources": ["../bundle-AjSd6n/strip-cf-connecting-ip-header.js", "../../../api/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-AjSd6n/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-AjSd6n/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/batson/Desktop/ForTheNerds/LunarClones/crypto-sentiment-vite-cloudflare/crypto-sentiment-dashboard/.wrangler/tmp/dev-j2z0KF",
  "sourcesContent": ["function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "// api/index.js\n\n// Mock data for demonstration\nconst MOCK_DATA = {\n\tbtc: {\n\t\tsymbol: 'BTC',\n\t\tname: 'Bitcoin',\n\t\tprice: 104080.81,\n\t\tgalaxyScore: 46.3,\n\t\taltRank: 306,\n\t\tmarketCap: 2068578645007.58,\n\t\tvolume24h: 41976305116.99,\n\t\tpercentChange24h: -1.07,\n\t\tpercentChange7d: -2.54,\n\t\tpercentChange30d: 7.27,\n\t\tvolatility: 0.0045,\n\t\tmarketCapRank: 1,\n\t\ttimestamp: new Date().toISOString(),\n\t},\n\teth: {\n\t\tsymbol: 'ETH',\n\t\tname: 'Ethereum',\n\t\tprice: 3840.23,\n\t\tgalaxyScore: 68.5,\n\t\taltRank: 2,\n\t\tmarketCap: 450000000000,\n\t\tvolume24h: 15000000000,\n\t\tpercentChange24h: 1.87,\n\t\tpercentChange7d: -1.23,\n\t\tpercentChange30d: 12.45,\n\t\tvolatility: 0.0067,\n\t\tmarketCapRank: 2,\n\t\ttimestamp: new Date().toISOString(),\n\t},\n\tsol: {\n\t\tsymbol: 'SOL',\n\t\tname: 'Solana',\n\t\tprice: 248.67,\n\t\tgalaxyScore: 62.1,\n\t\taltRank: 5,\n\t\tmarketCap: 118000000000,\n\t\tvolume24h: 3200000000,\n\t\tpercentChange24h: 4.32,\n\t\tpercentChange7d: 8.91,\n\t\tpercentChange30d: 22.15,\n\t\tvolatility: 0.0089,\n\t\tmarketCapRank: 5,\n\t\ttimestamp: new Date().toISOString(),\n\t},\n\tada: {\n\t\tsymbol: 'ADA',\n\t\tname: 'Cardano',\n\t\tprice: 1.23,\n\t\tgalaxyScore: 45.8,\n\t\taltRank: 12,\n\t\tmarketCap: 42000000000,\n\t\tvolume24h: 890000000,\n\t\tpercentChange24h: -0.95,\n\t\tpercentChange7d: 2.14,\n\t\tpercentChange30d: -3.67,\n\t\tvolatility: 0.0056,\n\t\tmarketCapRank: 8,\n\t\ttimestamp: new Date().toISOString(),\n\t},\n\tdot: {\n\t\tsymbol: 'DOT',\n\t\tname: 'Polkadot',\n\t\tprice: 8.45,\n\t\tgalaxyScore: 52.3,\n\t\taltRank: 18,\n\t\tmarketCap: 12500000000,\n\t\tvolume24h: 320000000,\n\t\tpercentChange24h: 2.67,\n\t\tpercentChange7d: -1.89,\n\t\tpercentChange30d: 15.42,\n\t\tvolatility: 0.0078,\n\t\tmarketCapRank: 12,\n\t\ttimestamp: new Date().toISOString(),\n\t},\n};\n\nfunction getMockData(symbol) {\n\tconst lowerSymbol = symbol.toLowerCase();\n\tif (MOCK_DATA[lowerSymbol]) {\n\t\treturn { ...MOCK_DATA[lowerSymbol], isMockData: true };\n\t}\n\n\t// Generate realistic mock data for unknown symbols\n\treturn {\n\t\tsymbol: symbol.toUpperCase(),\n\t\tname: `${symbol.toUpperCase()} Token`,\n\t\tprice: Math.round((Math.random() * 1000 + 0.01) * 100) / 100,\n\t\tgalaxyScore: Math.round((Math.random() * 80 + 10) * 10) / 10,\n\t\taltRank: Math.floor(Math.random() * 500) + 1,\n\t\tmarketCap: Math.floor(Math.random() * 100000000000),\n\t\tvolume24h: Math.floor(Math.random() * 5000000000),\n\t\tpercentChange24h: Math.round((Math.random() * 20 - 10) * 100) / 100,\n\t\tpercentChange7d: Math.round((Math.random() * 30 - 15) * 100) / 100,\n\t\tpercentChange30d: Math.round((Math.random() * 50 - 25) * 100) / 100,\n\t\tvolatility: Math.round(Math.random() * 0.01 * 10000) / 10000,\n\t\tmarketCapRank: Math.floor(Math.random() * 1000) + 1,\n\t\ttimestamp: new Date().toISOString(),\n\t\tisMockData: true,\n\t};\n}\n\nexport default {\n\tasync fetch(request, env, ctx) {\n\t\tconst url = new URL(request.url);\n\n\t\t// Handle CORS\n\t\tif (request.method === 'OPTIONS') {\n\t\t\treturn new Response(null, {\n\t\t\t\theaders: {\n\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n\t\t\t\t\t'Access-Control-Allow-Headers': 'Content-Type',\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\t// Crypto sentiment endpoint\n\t\tif (url.pathname.startsWith('/api/sentiment/')) {\n\t\t\tconst symbol = url.pathname.split('/')[3];\n\n\t\t\t// Validate symbol format (letters only, 2-10 characters)\n\t\t\tif (!symbol || !/^[A-Za-z]{2,10}$/.test(symbol)) {\n\t\t\t\treturn new Response(\n\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\terror: 'Invalid symbol format',\n\t\t\t\t\t\tmessage: 'Symbol must be 2-10 letters only (e.g., BTC, ETH)',\n\t\t\t\t\t}),\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus: 400,\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Check if API key is available\n\t\t\tif (!env.LUNARCRUSH_API_KEY) {\n\t\t\t\tconsole.log('No API key available, using mock data');\n\t\t\t\tconst mockData = getMockData(symbol);\n\t\t\t\treturn new Response(JSON.stringify(mockData), {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t'Cache-Control': 'public, max-age=60',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// We have an API key, so try the real API\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(\n\t\t\t\t\t`https://lunarcrush.com/api4/public/coins/${symbol.toLowerCase()}/v1`,\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\tAuthorization: `Bearer ${env.LUNARCRUSH_API_KEY}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// If unauthorized or forbidden, the API key is invalid\n\t\t\t\tif (response.status === 401 || response.status === 403) {\n\t\t\t\t\tconsole.log('API key invalid or unauthorized, using mock data');\n\t\t\t\t\tconst mockData = getMockData(symbol);\n\t\t\t\t\treturn new Response(JSON.stringify(mockData), {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t\t'Cache-Control': 'public, max-age=60',\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// If we get a successful response from the API\n\t\t\t\tif (response.ok) {\n\t\t\t\t\tconst data = await response.json();\n\n\t\t\t\t\t// Check if the coin exists in the API response\n\t\t\t\t\tif (!data.data) {\n\t\t\t\t\t\t// Coin doesn't exist - return proper error (don't fall back to mock data)\n\t\t\t\t\t\treturn new Response(\n\t\t\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\t\t\terror: 'Cryptocurrency not found',\n\t\t\t\t\t\t\t\tmessage: `The cryptocurrency \"${symbol.toUpperCase()}\" was not found. Please check the symbol and try again.`,\n\t\t\t\t\t\t\t\tsuggestion:\n\t\t\t\t\t\t\t\t\t'Try popular symbols like BTC, ETH, SOL, ADA, MATIC, DOT, etc.',\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: 404,\n\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Format real API response\n\t\t\t\t\tconst coinData = data.data;\n\t\t\t\t\tconst formatted = {\n\t\t\t\t\t\tsymbol: symbol.toUpperCase(),\n\t\t\t\t\t\tname: coinData.name || 'Unknown',\n\t\t\t\t\t\tprice: coinData.price || 0,\n\t\t\t\t\t\tgalaxyScore: coinData.galaxy_score || 0,\n\t\t\t\t\t\taltRank: coinData.alt_rank || 0,\n\t\t\t\t\t\tmarketCap: coinData.market_cap || 0,\n\t\t\t\t\t\tvolume24h: coinData.volume_24h || 0,\n\t\t\t\t\t\tpercentChange24h: coinData.percent_change_24h || 0,\n\t\t\t\t\t\tpercentChange7d: coinData.percent_change_7d || 0,\n\t\t\t\t\t\tpercentChange30d: coinData.percent_change_30d || 0,\n\t\t\t\t\t\tvolatility: coinData.volatility || 0,\n\t\t\t\t\t\tmarketCapRank: coinData.market_cap_rank || 0,\n\t\t\t\t\t\ttimestamp: new Date().toISOString(),\n\t\t\t\t\t\tisMockData: false,\n\t\t\t\t\t};\n\n\t\t\t\t\treturn new Response(JSON.stringify(formatted), {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t\t'Cache-Control': 'public, max-age=300',\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// API returned an error (500, etc.) - this is a server issue, fall back to mock\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'LunarCrush API server error, using mock data:',\n\t\t\t\t\t\tresponse.status\n\t\t\t\t\t);\n\t\t\t\t\tconst mockData = getMockData(symbol);\n\t\t\t\t\treturn new Response(JSON.stringify(mockData), {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t\t'Cache-Control': 'public, max-age=60',\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Network error or other exception - fall back to mock data\n\t\t\t\tconsole.log(\n\t\t\t\t\t'API call failed due to network/exception, using mock data:',\n\t\t\t\t\terror.message\n\t\t\t\t);\n\t\t\t\tconst mockData = getMockData(symbol);\n\t\t\t\treturn new Response(JSON.stringify(mockData), {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t'Cache-Control': 'public, max-age=60',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Health check\n\t\tif (url.pathname === '/api/health') {\n\t\t\treturn new Response(\n\t\t\t\tJSON.stringify({\n\t\t\t\t\tstatus: 'healthy',\n\t\t\t\t\ttimestamp: new Date().toISOString(),\n\t\t\t\t}),\n\t\t\t\t{\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\t// Serve static assets\n\t\treturn env.ASSETS.fetch(request);\n\t},\n};\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/batson/Desktop/ForTheNerds/LunarClones/crypto-sentiment-vite-cloudflare/crypto-sentiment-dashboard/api/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/batson/Desktop/ForTheNerds/LunarClones/crypto-sentiment-vite-cloudflare/crypto-sentiment-dashboard/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/batson/Desktop/ForTheNerds/LunarClones/crypto-sentiment-vite-cloudflare/crypto-sentiment-dashboard/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/batson/Desktop/ForTheNerds/LunarClones/crypto-sentiment-vite-cloudflare/crypto-sentiment-dashboard/api/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/batson/Desktop/ForTheNerds/LunarClones/crypto-sentiment-vite-cloudflare/crypto-sentiment-dashboard/.wrangler/tmp/bundle-AjSd6n/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/batson/Desktop/ForTheNerds/LunarClones/crypto-sentiment-vite-cloudflare/crypto-sentiment-dashboard/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/batson/Desktop/ForTheNerds/LunarClones/crypto-sentiment-vite-cloudflare/crypto-sentiment-dashboard/.wrangler/tmp/bundle-AjSd6n/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/batson/Desktop/ForTheNerds/LunarClones/crypto-sentiment-vite-cloudflare/crypto-sentiment-dashboard/.wrangler/tmp/bundle-AjSd6n/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
